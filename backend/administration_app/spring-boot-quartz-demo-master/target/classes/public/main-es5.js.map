{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/add-route/add-route.component.ts","webpack:///src/app/components/add-route/add-route.component.html","webpack:///src/app/components/confirm-route-delete/confirm-route-delete.component.ts","webpack:///src/app/components/confirm-route-delete/confirm-route-delete.component.html","webpack:///src/app/components/edit-route/edit-route.component.ts","webpack:///src/app/components/edit-route/edit-route.component.html","webpack:///src/app/components/home/home.component.ts","webpack:///src/app/components/home/home.component.html","webpack:///src/app/components/login/login.component.ts","webpack:///src/app/components/login/login.component.html","webpack:///src/app/components/scheduler/response.code.constants.ts","webpack:///src/app/components/scheduler/scheduler.component.ts","webpack:///src/app/components/scheduler/scheduler.component.html","webpack:///src/app/components/toolbar/toolbar.component.ts","webpack:///src/app/components/toolbar/toolbar.component.html","webpack:///src/app/services/auth-interceptor.service.ts","webpack:///src/app/services/route.service.ts","webpack:///src/app/services/scheduler.service.ts","webpack:///src/app/services/user.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","path","component","redirectTo","pathMatch","AppModule","provide","useClass","multi","declarations","providers","bootstrap","AddRouteComponent","location","router","routeService","newRoute","name","uri","username","password","isReachable","back","checkReachability","subscribe","res","console","log","value","random","Math","addRoute","navigate","error","alert","goBack","save","ConfirmRouteDeleteComponent","bottomsheet","data","route","dismiss","deleteRoutePermanently","EditRouteComponent","activatedroute","paramMap","params","routeID","get","getRoute","setValue","editRoute","HomeComponent","confirmRouteDelete","refreshRoutes","getAllRoutes","r","push","status","routeIsReachable","index","findIndex","open","_openedBottomSheetRef","afterDismissed","dataFromChild","deleteRoute","goAddRoute","LoginComponent","userService","loginForm","login","localStorage","setItem","err","ServerResponseCode","JOB_WITH_SAME_NAME_EXIST","JOB_NAME_NOT_PRESENT","JOB_ALREADY_IN_RUNNING_STATE","JOB_NOT_IN_PAUSED_STATE","JOB_NOT_IN_RUNNING_STATE","JOB_DOESNT_EXIST","ERROR","SUCCESS","providedIn","SchedulerComponent","_router","_fb","_schedulerService","_responseCode","jobNameStatus","jobRecords","isEditMode","jobTypes","viewValue","defaultJobType","schedulerForm","group","jobName","year","month","day","hour","minute","cronExpression","jobType","setDate","getJobs","tick","jobRefreshTimerSubscription","t","unsubscribe","date","Date","patchValue","getFullYear","getMonth","getDate","getHours","getMinutes","dateNow","success","isJobWithNamePresent","checkJobExistWith","getFormattedDate","scheduleJob","resetForm","updateJob","selectedJobRow","d","parse","scheduleTime","pauseJob","resumeJob","stopJob","startJobNow","deleteJob","cronExp","cronChange","ToolbarComponent","getItem","thereIsToken","removeItem","API_URL","apiUrl","AuthInterceptorService","next","idToken","cloned","clone","headers","set","handle","url","BACKEND_URL","RouteService","http","body","post","put","SchedulerService","_http","getJobsUrl","scheduleJobUrl","pauseJobUrl","resumeJobUrl","deleteJobUrl","updateJobUrl","isJobWithNamePresentUrl","stopJobUrl","startJobNowUrl","options","key","search","pipe","json","UserService","environment","production","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n\tselector: 'app-root',\n\ttemplateUrl: './app.component.html',\n\tstyleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\ttitle = 'frontend';\n\n}\n","<!-- The routed views render in the <router-outlet>-->\n<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { HttpModule } from '@angular/http';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { Routes, RouterModule } from '@angular/router';\nimport { MatListModule } from '@angular/material/list';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { ConfirmRouteDeleteComponent } from './components/confirm-route-delete/confirm-route-delete.component';\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\nimport { AddRouteComponent } from './components/add-route/add-route.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { EditRouteComponent } from './components/edit-route/edit-route.component';\nimport { SchedulerComponent } from './components/scheduler/scheduler.component';\nimport { MatSelectModule } from '@angular/material/select';\nimport { LoginComponent } from './components/login/login.component';\nimport { AuthInterceptorService } from './services/auth-interceptor.service';\nimport { ToolbarComponent } from './components/toolbar/toolbar.component';\n\nconst routes: Routes = [\n\t{ path: 'home', component: HomeComponent },\n\t{ path: 'addroute', component: AddRouteComponent },\n\t{ path: 'editroute/:routeID', component: EditRouteComponent },\n\t{ path: 'scheduler', component: SchedulerComponent },\n\t{ path: 'login', component: LoginComponent },\n\t{ path: '', redirectTo: '/home', pathMatch: 'full' },\n]\n\n@NgModule({\n\tdeclarations: [\n\t\tAppComponent,\n\t\tHomeComponent,\n\t\tConfirmRouteDeleteComponent,\n\t\tAddRouteComponent,\n\t\tEditRouteComponent,\n\t\tSchedulerComponent,\n\t\tLoginComponent,\n\t\tToolbarComponent\n\t],\n\timports: [\n\t\tBrowserModule,\n\t\tAppRoutingModule,\n\t\tBrowserAnimationsModule,\n\t\tRouterModule.forRoot(routes),\n\t\tMatToolbarModule,\n\t\tMatListModule,\n\t\tMatButtonModule,\n\t\tMatIconModule,\n\t\tMatBottomSheetModule,\n\t\tFormsModule,\n\t\tReactiveFormsModule,\n\t\tMatFormFieldModule,\n\t\tMatInputModule,\n\t\tHttpClientModule,\n\t\tHttpModule,\n\t\tMatSelectModule\n\t],\n\tproviders: [\n\t\t{\n\t\t\tprovide: HTTP_INTERCEPTORS,\n\t\t\tuseClass: AuthInterceptorService,\n\t\t\tmulti: true\n\t\t}\n\t],\n\tbootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { RouteService } from 'src/app/services/route.service';\n\n@Component({\n\tselector: 'app-add-route',\n\ttemplateUrl: './add-route.component.html',\n\tstyleUrls: ['./add-route.component.css']\n})\nexport class AddRouteComponent {\n\n\tnewRoute: FormGroup = new FormGroup({\n\t\tname: new FormControl(),\n\t\turi: new FormControl(),\n\t\tusername: new FormControl(),\n\t\tpassword: new FormControl()\n\t});\n\n\tisReachable: boolean = false;\n\n\tconstructor(private location: Location,\n\t\tprivate router: Router,\n\t\tprivate routeService: RouteService) { }\n\n\tgoBack() {\n\t\tthis.location.back();\n\t}\n\n\ttryConnection(): void {\n\t\tthis.routeService.checkReachability(\"idHARDCODED\").subscribe(res => {\n\t\t\tconsole.log(\"Is reachable?---> \" + res);\n\t\t\tconsole.log(this.newRoute.value);\n\n\t\t\t// The new status of reachability will be calculated here\n\t\t\tvar random = Math.random();\n\t\t\tthis.isReachable = random < 0.5;\n\t\t})\n\t}\n\n\tsave(): void {\n\t\tthis.routeService.addRoute(\n\t\t\tthis.newRoute.value.name,\n\t\t\tthis.newRoute.value.uri,\n\t\t\tthis.newRoute.value.username,\n\t\t\tthis.newRoute.value.password\n\t\t).subscribe(\n\t\t\tres => {\n\t\t\t\tif (res['statusCode'] == 201) {\n\t\t\t\t\tthis.router.navigate(['/home']);\n\t\t\t\t}\n\t\t\t\telse if (res['statusCode'] == 400) {\n\t\t\t\t\tconsole.error(res);\n\t\t\t\t\talert(\"It was not possible to save the route\");\n\t\t\t\t}\n\t\t\t})\n\t}\n\n}\n","<app-toolbar></app-toolbar>\n<button mat-icon-button class=\"goBack\" (click)=\"goBack()\">\n\t<mat-icon>arrow_back</mat-icon>\n</button>\n<div class=\"general\">\n\t<h2 class=\"addRoute\">\n\t\tAdd a new route\n\t</h2>\n\t<form [formGroup]=\"newRoute\">\n\t\t<mat-form-field appearance=\"legacy\">\n\t\t\t<mat-label>Name</mat-label>\n\t\t\t<input matInput type=\"text\" formControlName=\"name\">\n\t\t</mat-form-field>\n\t\t<br>\n\t\t<mat-form-field appearance=\"legacy\" id=\"uri\">\n\t\t\t<mat-label>uri</mat-label>\n\t\t\t<input matInput type=\"text\" formControlName=\"uri\">\n\t\t</mat-form-field>\n\t\t<!-- <button mat-icon-button disabled>\n\t\t\t<mat-icon id=\"reachable\" class=\"status\" *ngIf=\"isReachable\">check_circle</mat-icon>\n\t\t\t<mat-icon id=\"notReachable\" class=\"status\" *ngIf=\"!isReachable\">highlight_off</mat-icon>\n\t\t</button> -->\n\t\t<br>\n\t\t<mat-form-field appearance=\"legacy\" id=\"username\">\n\t\t\t<mat-label>Username</mat-label>\n\t\t\t<input matInput type=\"text\" formControlName=\"username\">\n\t\t</mat-form-field>\n\t\t<br>\n\t\t<mat-form-field appearance=\"legacy\" id=\"password\">\n\t\t\t<mat-label>Password</mat-label>\n\t\t\t<input matInput type=\"text\" formControlName=\"password\">\n\t\t</mat-form-field>\n\t</form>\n\t<div class=\"controls\">\n\t\t<!-- <button mat-raised-button id=\"tryConnection\" (click)=\"tryConnection()\">Try connection</button>\n\t\t<br> -->\n\t\t<button mat-raised-button id=\"save\" (click)=\"save()\">Save</button>\n\t</div>\n</div>","import { Component, OnInit, Inject, Output, EventEmitter } from '@angular/core';\nimport { MAT_BOTTOM_SHEET_DATA, MatBottomSheetRef } from '@angular/material/bottom-sheet';\nimport { route } from '../home/home.component'\n\n@Component({\n\tselector: 'app-confirm-route-delete',\n\ttemplateUrl: './confirm-route-delete.component.html',\n\tstyleUrls: ['./confirm-route-delete.component.css']\n})\nexport class ConfirmRouteDeleteComponent {\n\n\tpublic route: route;\n\n\tconstructor(private bottomsheet: MatBottomSheetRef<ConfirmRouteDeleteComponent>,\n\t\t@Inject(MAT_BOTTOM_SHEET_DATA) public data: any) {\n\t\tthis.route = data.route;\n\t}\n\n\tdeleteRoutePermanently(){\n\t\tthis.bottomsheet.dismiss(\"deletePermanently\");\n\t}\n\n}\n","<div class=\"bottomSheet\">\n\t<h3>Are you sure you want to delete <span id=\"routeTitle\">{{route.name}}</span>?</h3>\n\t<button mat-raised-button color=\"warn\" (click)=\"deleteRoutePermanently()\">I'm sure I want to delete the database</button>\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { RouteService } from 'src/app/services/route.service';\n\n@Component({\n\tselector: 'app-edit-route',\n\ttemplateUrl: './edit-route.component.html',\n\tstyleUrls: ['./edit-route.component.css']\n})\nexport class EditRouteComponent {\n\n\trouteID: string;\n\n\tnewRoute: FormGroup = new FormGroup({\n\t\tname: new FormControl(),\n\t\turi: new FormControl(),\n\t\tusername: new FormControl(),\n\t\tpassword: new FormControl()\n\t});\n\n\tisReachable: boolean = false;\n\n\tconstructor(private location: Location,\n\t\tprivate router: Router,\n\t\tprivate activatedroute: ActivatedRoute,\n\t\tprivate routeService: RouteService) {\n\t\tthis.activatedroute.paramMap.subscribe(\n\t\t\tparams => {\n\t\t\t\tthis.routeID = params.get('routeID');\n\t\t\t\tthis.routeService.getRoute(this.routeID).subscribe(\n\t\t\t\t\tres => {\n\t\t\t\t\t\tif (res['statusCode'] == 200) {\n\t\t\t\t\t\t\t//This will fill the form with the previous route info\n\t\t\t\t\t\t\tthis.newRoute.get('name').setValue(res['data']['name']);\n\t\t\t\t\t\t\tthis.newRoute.get('uri').setValue(res['data']['uri']);\n\t\t\t\t\t\t\tthis.newRoute.get('username').setValue(res['data']['username']);\n\t\t\t\t\t\t\tthis.newRoute.get('password').setValue(res['data']['password']);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (res['statusCode'] == 400) {\n\t\t\t\t\t\t\tconsole.error(res);\n\t\t\t\t\t\t\talert(\"It was not possible to load the previous info of the route\");\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t});\n\t}\n\n\tgoBack() {\n\t\tthis.location.back();\n\t}\n\n\ttryConnection(): void {\n\t\tthis.routeService.checkReachability(this.routeID).subscribe(res => {\n\t\t\tthis.isReachable = res;\n\t\t})\n\t}\n\n\tsave(): void {\n\t\tthis.routeService.editRoute(this.routeID, this.newRoute.value.name, this.newRoute.value.uri, this.newRoute.value.username, this.newRoute.value.password)\n\t\t\t.subscribe(\n\t\t\t\tres => {\n\t\t\t\t\tif (res['statusCode'] == 200) {\n\t\t\t\t\t\tthis.router.navigate(['/home']);\n\t\t\t\t\t}\n\t\t\t\t\telse if (res['statusCode'] == 400) {\n\t\t\t\t\t\tconsole.error(res);\n\t\t\t\t\t\talert(\"It was not possible to edit the route\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t)\n\t}\n}\n","<app-toolbar></app-toolbar>\n<button mat-icon-button class=\"goBack\" (click)=\"goBack()\">\n\t<mat-icon>arrow_back</mat-icon>\n</button>\n<div class=\"general\">\n\t<h2 class=\"editRoute\">\n\t\tEdit existing route\n\t</h2>\n\t<form [formGroup]=\"newRoute\">\n\t\t<mat-form-field appearance=\"legacy\">\n\t\t\t<mat-label>Name</mat-label>\n\t\t\t<input matInput type=\"text\" formControlName=\"name\">\n\t\t</mat-form-field>\n\t\t<br>\n\t\t<mat-form-field appearance=\"legacy\" id=\"uri\">\n\t\t\t<mat-label>uri</mat-label>\n\t\t\t<input matInput type=\"text\" formControlName=\"uri\">\n\t\t</mat-form-field>\n\t\t<!-- <button mat-icon-button disabled>\n\t\t\t<mat-icon id=\"reachable\" class=\"status\" *ngIf=\"isReachable\">check_circle</mat-icon>\n\t\t\t<mat-icon id=\"notReachable\" class=\"status\" *ngIf=\"!isReachable\">highlight_off</mat-icon>\n\t\t</button> -->\n\t\t<br>\n\t\t<mat-form-field appearance=\"legacy\" id=\"username\">\n\t\t\t<mat-label>Username</mat-label>\n\t\t\t<input matInput type=\"text\" formControlName=\"username\">\n\t\t</mat-form-field>\n\t\t<br>\n\t\t<mat-form-field appearance=\"legacy\" id=\"password\">\n\t\t\t<mat-label>Password</mat-label>\n\t\t\t<input matInput type=\"text\" formControlName=\"password\">\n\t\t</mat-form-field>\n\t</form>\n\t<div class=\"controls\">\n\t\t<!-- <button mat-raised-button id=\"tryConnection\" (click)=\"tryConnection()\">Try connection</button>\n\t\t<br> -->\n\t\t<button mat-raised-button id=\"save\" (click)=\"save()\">Save</button>\n\t</div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { MatBottomSheet, MatBottomSheetRef } from '@angular/material/bottom-sheet';\nimport { ConfirmRouteDeleteComponent } from '../confirm-route-delete/confirm-route-delete.component'\nimport { Router } from '@angular/router';\nimport { RouteService } from 'src/app/services/route.service';\n\nexport interface route {\n\tid: string,\n\tname: string,\n\turi: string,\n\tusername: string,\n\tpassword: string,\n\tstatus: boolean\n}\n\n@Component({\n\tselector: 'app-home',\n\ttemplateUrl: './home.component.html',\n\tstyleUrls: ['./home.component.css']\n})\nexport class HomeComponent {\n\n\troutes: route[] = [];\n\n\tconstructor(private confirmRouteDelete: MatBottomSheet,\n\t\tprivate router: Router,\n\t\tprivate routeService: RouteService) {\n\t\tthis.refreshRoutes();\n\t}\n\n\t/* Asks to backend for the routes saved */\n\trefreshRoutes(): void {\n\t\tthis.routes = [];\n\t\tthis.routeService.getAllRoutes().subscribe(res => {\n\t\t\tfor (let r of res['data']) {\n\t\t\t\tthis.routes.push({\n\t\t\t\t\tid: r['id'],\n\t\t\t\t\tname: r['name'],\n\t\t\t\t\turi: r['uri'],\n\t\t\t\t\tusername: r['username'],\n\t\t\t\t\tpassword: r['password'],\n\t\t\t\t\tstatus: false\n\t\t\t\t});\n\t\t\t\tthis.routeIsReachable(r);\n\t\t\t}\n\t\t})\n\t}\n\n\t/*\n\tAttempts to reach de uri of the route.\n\tIn case of success the array \"routes\" is updated and returns true.\n\tOtherwise, the array \"routes\" is updated and returns false.\n\t */\n\trouteIsReachable(route): void {\n\t\tthis.routeService.checkReachability(route.id).subscribe(res => {\n\t\t\tvar index = this.routes.findIndex(r => r.id == route.id);\n\t\t\tif (index != -1) {\n\t\t\t\tthis.routes[index].status = res;\n\t\t\t}\n\t\t})\n\t}\n\n\t/* \n\tOpens a bottom sheet where the user confirms the delete.\n\tIf the user confirms the route is deleted from the array \"routes\"\n\t */\n\tdeleteRoute(route): void {\n\t\tthis.confirmRouteDelete.open(ConfirmRouteDeleteComponent, { data: { route: route } });\n\t\tthis.confirmRouteDelete._openedBottomSheetRef.afterDismissed().subscribe((dataFromChild) => {\n\t\t\tif (dataFromChild == \"deletePermanently\") {\n\t\t\t\tthis.routeService.deleteRoute(route.id).subscribe(\n\t\t\t\t\tres => {\n\t\t\t\t\t\tif (res['data']) {\n\t\t\t\t\t\t\tthis.refreshRoutes()\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\talert(\"It was not possible to delete the route\");\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t}\n\t\t})\n\t}\n\n\t/* Navigates to Edit Route with the info of the route */\n\tgoEditRoute(route): void {\n\t\tthis.router.navigate(['/editroute/' + route.id])\n\t}\n\n\t/* Navigates to Add Route page */\n\tgoAddRoute() {\n\t\tthis.router.navigate(['/addroute']);\n\t}\n\n\t/* Navigates to Scheduler page */\n\tgoScheduler() {\n\t\tthis.router.navigate(['/scheduler']);\n\t}\n}\n","<app-toolbar></app-toolbar>\n<div class=\"databaseRoutes\">\n\t<h2 class=\"databaseRoutes\">Database routes\n\t\t<button mat-raised-button class=\"databaseRoutes\" color=\"primary\" (click)=\"goAddRoute()\">Add route</button>\n\t</h2>\n\t<mat-list *ngFor=\"let route of routes; last as last\">\n\t\t<span id=\"lightText\">Name: </span>\n\t\t<span id=\"routeTitle\">{{route.name}}</span>\n\t\t<mat-list-item>\n\t\t\t<span id=\"lightText\">uri: </span>\n\t\t\t<span class=\"routeUri\">{{route.uri}}</span>\n\t\t\t<span class=\"routeControls\">\n\t\t\t\t<span id=\"lightText\" style=\"margin-top: 11px;\">status</span>\n\t\t\t\t<button mat-icon-button class=\"routeControls\" *ngIf=\"!route.status\" disabled>\n\t\t\t\t\t<mat-icon id=\"notReachable\" class=\"status\">highlight_off</mat-icon>\n\t\t\t\t</button>\n\t\t\t\t<button mat-icon-button class=\"routeControls\" *ngIf=\"route.status\" disabled>\n\t\t\t\t\t<mat-icon id=\"reachable\" class=\"status\">check_circle</mat-icon>\n\t\t\t\t</button>\n\t\t\t\t<button mat-icon-button class=\"routeControls\" *ngIf=\"route.status\" (click)=\"routeIsReachable(route)\">\n\t\t\t\t\t<mat-icon id=\"refreshGrey\">autorenew</mat-icon>\n\t\t\t\t</button>\n\t\t\t\t<button mat-icon-button class=\"routeControls\" *ngIf=\"!route.status\" (click)=\"routeIsReachable(route)\">\n\t\t\t\t\t<mat-icon id=\"refresh\">autorenew</mat-icon>\n\t\t\t\t</button>\n\t\t\t\t<button mat-icon-button class=\"routeControls\" (click)=\"goEditRoute(route)\">\n\t\t\t\t\t<mat-icon id=\"edit\">edit</mat-icon>\n\t\t\t\t</button>\n\t\t\t\t<button mat-icon-button class=\"routeControls\" (click)=\"deleteRoute(route)\">\n\t\t\t\t\t<mat-icon id=\"delete\">delete</mat-icon>\n\t\t\t\t</button>\n\t\t\t</span>\n\t\t</mat-list-item>\n\t\t<mat-list-item>\n\t\t\t<span id=\"lightText\">Username: </span>\n\t\t\t<span id=\"routeUsername\">{{route.username}}</span>\n\t\t\t<span id=\"lightText\">Password: </span>\n\t\t\t<span id=\"routePassword\">{{route.password}}</span>\n\t\t</mat-list-item>\n\t\t<mat-divider *ngIf=\"!last\"></mat-divider>\n\t</mat-list>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { UserService } from 'src/app/services/user.service';\nimport { Router } from '@angular/router';\n\n@Component({\n\tselector: 'app-login',\n\ttemplateUrl: './login.component.html',\n\tstyleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n\n\tloginForm: FormGroup = new FormGroup({\n\t\tusername: new FormControl(),\n\t\tpassword: new FormControl()\n\t});\n\n\tconstructor(private userService: UserService,\n\t\tprivate router: Router) { }\n\n\tlogin(): void {\n\t\tthis.userService.login(this.loginForm.get('username').value, this.loginForm.get('password').value)\n\t\t\t.subscribe(\n\t\t\t\tres => {\n\t\t\t\t\tif (res['statusCode'] == 200) {\n\t\t\t\t\t\tconsole.log(\"INICIO DE SESION BIEN\");\n\t\t\t\t\t\tconsole.log(res['data']);\n\t\t\t\t\t\tlocalStorage.setItem('token', res['data']);\n\t\t\t\t\t\tthis.router.navigate(['home']);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tconsole.log(\"INICIO DE SESION MAL\");\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\terr => {\n\t\t\t\t\tconsole.log(err);\n\t\t\t\t\tconsole.log(\"Error al iniciar sesion\");\n\t\t\t\t});\n\t}\n\n}\n","<app-toolbar></app-toolbar>\n<div class=\"general\">\n\t<h2 class=\"addRoute\">\n\t\tLogin\n\t</h2>\n\t<form [formGroup]=\"loginForm\">\n\t\t<mat-form-field appearance=\"legacy\" id=\"username\">\n\t\t\t<mat-label>Username</mat-label>\n\t\t\t<input matInput type=\"text\" formControlName=\"username\">\n\t\t</mat-form-field>\n\t\t<br>\n\t\t<mat-form-field appearance=\"legacy\" id=\"password\">\n\t\t\t<mat-label>Password</mat-label>\n\t\t\t<input matInput type=\"password\" formControlName=\"password\">\n\t\t</mat-form-field>\n\t</form>\n\t<div class=\"controls\">\n\t\t<button mat-raised-button id=\"save\" (click)=\"login()\">Enter</button>\n\t</div>\n</div>","import { Injectable } from '@angular/core';\n\n\n@Injectable({\n\tprovidedIn: 'root'\n})\nexport class ServerResponseCode {\n    //SPECIFIC ERROR CODES\n\tstatic JOB_WITH_SAME_NAME_EXIST = 501;\n\tstatic JOB_NAME_NOT_PRESENT = 502;\n\t\n\tstatic JOB_ALREADY_IN_RUNNING_STATE = 510;\n\t\n\tstatic JOB_NOT_IN_PAUSED_STATE = 520;\n\tstatic JOB_NOT_IN_RUNNING_STATE = 521;\n\t\n\tstatic JOB_DOESNT_EXIST = 500;\n\t\n\t//GENERIC ERROR\n\tstatic ERROR = 600;\n\t\n\t//SUCCESS CODES\n\tstatic SUCCESS = 200;\n}","import { Component, OnInit, OnDestroy, ViewChild } from \"@angular/core\";\r\nimport { FormGroup, FormControl, FormBuilder, Validators } from '@angular/forms';\r\nimport { Router } from \"@angular/router\";\r\nimport { ServerResponseCode } from './response.code.constants';\r\nimport { Subscription, Observable, timer } from 'rxjs';\r\nimport { SchedulerService } from 'src/app/services/scheduler.service';\r\n\r\ninterface job {\r\n\tvalue: string,\r\n\tviewValue: string\r\n}\r\n\r\n@Component({\r\n\tselector: 'app-scheduler',\r\n\ttemplateUrl: './scheduler.component.html',\r\n\tstyleUrls: ['./scheduler.component.css']\r\n})\r\nexport class SchedulerComponent implements OnInit, OnDestroy {\r\n\tschedulerForm: FormGroup;\r\n\tjobNameStatus: boolean = false;\r\n\tjobRecords = [];\r\n\tjobRefreshTimerSubscription: Subscription;\r\n\r\n\tisEditMode: boolean = false;\r\n\r\n\tjobTypes: job[] = [\r\n\t\t{\r\n\t\t\tvalue: \"download-emotions\",\r\n\t\t\tviewValue: \"Download emotions\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tvalue: \"download-osm\",\r\n\t\t\tviewValue: \"Download data from OSM\"\r\n\t\t}\r\n\t]\r\n\tdefaultJobType=\"download-emotions\";\r\n\r\n\tconstructor(private _router: Router,\r\n\t\tprivate _fb: FormBuilder,\r\n\t\tprivate _schedulerService: SchedulerService,\r\n\t\tprivate _responseCode: ServerResponseCode) { }\r\n\r\n\tngOnInit() {\r\n\t\tthis.schedulerForm = this._fb.group({\r\n\t\t\tjobName: [''],\r\n\t\t\tyear: [''],\r\n\t\t\tmonth: [''],\r\n\t\t\tday: [''],\r\n\t\t\thour: [''],\r\n\t\t\tminute: [''],\r\n\t\t\tcronExpression: ['0 0/1 * 1/1 * ? *'],\r\n\t\t\tjobType: [this.defaultJobType]\r\n\t\t});\r\n\t\tthis.setDate();\r\n\t\tthis.getJobs();\r\n\r\n\t\tlet tick = timer(2000, 3000);\r\n\t\tthis.jobRefreshTimerSubscription = tick.subscribe(t => {\r\n\t\t\tthis.getJobs();\r\n\t\t});\r\n\t}\r\n\r\n\tngOnDestroy() {\r\n\t\tthis.jobRefreshTimerSubscription.unsubscribe();\r\n\t}\r\n\r\n\tsetDate(): void {\r\n\t\tlet date = new Date();\r\n\t\tthis.schedulerForm.patchValue({\r\n\t\t\tyear: date.getFullYear(),\r\n\t\t\tmonth: date.getMonth() + 1,\r\n\t\t\tday: date.getDate(),\r\n\t\t\thour: date.getHours(),\r\n\t\t\tminute: date.getMinutes()\r\n\t\t});\r\n\t}\r\n\r\n\tresetForm() {\r\n\t\tvar dateNow = new Date();\r\n\t\tthis.schedulerForm.patchValue({\r\n\t\t\tjobName: \"\",\r\n\t\t\tyear: dateNow.getFullYear(),\r\n\t\t\tmonth: dateNow.getMonth() + 1,\r\n\t\t\tday: dateNow.getDate(),\r\n\t\t\thour: dateNow.getHours(),\r\n\t\t\tminute: dateNow.getMinutes()\r\n\t\t});\r\n\t\tthis.jobNameStatus = false;\r\n\t}\r\n\r\n\tgetJobs() {\r\n\t\tthis._schedulerService.getJobs().subscribe(\r\n\t\t\tsuccess => {\r\n\t\t\t\tif (success['statusCode'] == ServerResponseCode.SUCCESS) {\r\n\t\t\t\t\tthis.jobRecords = success['data'];\r\n\t\t\t\t} else {\r\n\t\t\t\t\talert(\"Some error while fetching jobs\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/*\r\n\t\t\t\tlet dateToShow = new Date(success.scheduleTime);\r\n\t\t\t\tthis.jobRecords.scheduleTime = this.getFormattedDate(dateToShow.getFullYear(), \r\n\t\t\t\t  dateToShow.getMonth(),dateToShow.getHours(), dateToShow.getHours(),\r\n\t\t\t\t  dateToShow.getMinutes());\r\n\t\t\t\t*/\r\n\t\t\t},\r\n\t\t\terr => {\r\n\t\t\t\talert(\"Error while getting all jobs\");\r\n\t\t\t});\r\n\t}\r\n\r\n\tgetFormattedDate(year, month, day, hour, minute) {\r\n\t\treturn year + \"/\" + month + \"/\" + day + \" \" + hour + \":\" + minute;\r\n\t}\r\n\r\n\tcheckJobExistWith(jobName) {\r\n\t\tvar data = {\r\n\t\t\t\"jobName\": jobName\r\n\t\t}\r\n\t\tthis._schedulerService.isJobWithNamePresent(data).subscribe(\r\n\t\t\tsuccess => {\r\n\t\t\t\tif (success['statusCode'] == ServerResponseCode.SUCCESS) {\r\n\t\t\t\t\tif (success['data'] == true) {\r\n\t\t\t\t\t\tthis.jobNameStatus = false;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.jobNameStatus = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (success['statusCode'] == ServerResponseCode.JOB_NAME_NOT_PRESENT) {\r\n\t\t\t\t\talert(\"Job name is mandatory.\");\r\n\t\t\t\t\tthis.schedulerForm.patchValue({\r\n\t\t\t\t\t\tjobName: \"\",\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\terr => {\r\n\t\t\t\talert(\"Error while checkinh job with name exist.\");\r\n\t\t\t});\r\n\t\tthis.jobNameStatus = false;\r\n\t}\r\n\r\n\tscheduleJob() {\r\n\t\tvar jobName = this.schedulerForm.value.jobName;\r\n\t\tvar year = this.schedulerForm.value.year;\r\n\t\tvar month = this.schedulerForm.value.month;\r\n\t\tvar day = this.schedulerForm.value.day;\r\n\t\tvar hour = this.schedulerForm.value.hour;\r\n\t\tvar minute = this.schedulerForm.value.minute;\r\n\r\n\t\tthis.checkJobExistWith(jobName);\r\n\r\n\t\tvar data = {\r\n\t\t\t\"jobName\": this.schedulerForm.value.jobName,\r\n\t\t\t\"jobScheduleTime\": this.getFormattedDate(year, month, day, hour, minute),\r\n\t\t\t\"cronExpression\": this.schedulerForm.value.cronExpression,\r\n\t\t\t\"jobType\": this.schedulerForm.value.jobType\r\n\t\t}\r\n\r\n\t\tthis._schedulerService.scheduleJob(data).subscribe(\r\n\t\t\tsuccess => {\r\n\t\t\t\tif (success['statusCode'] == ServerResponseCode.SUCCESS) {\r\n\t\t\t\t\talert(\"Job scheduled successfully.\");\r\n\t\t\t\t\tthis.resetForm();\r\n\r\n\t\t\t\t} else if (success['statusCode'] == ServerResponseCode.JOB_WITH_SAME_NAME_EXIST) {\r\n\t\t\t\t\talert(\"Job with same name exists, Please choose different name.\");\r\n\r\n\t\t\t\t} else if (success['statusCode'] == ServerResponseCode.JOB_NAME_NOT_PRESENT) {\r\n\t\t\t\t\talert(\"Job name is mandatory.\");\r\n\t\t\t\t}\r\n\t\t\t\tthis.jobRecords = success['data'];\r\n\t\t\t},\r\n\t\t\terr => {\r\n\t\t\t\talert(\"Error while getting all jobs\");\r\n\t\t\t});\r\n\t}\r\n\r\n\tupdateJob() {\r\n\t\tvar jobName = this.schedulerForm.value.jobName;\r\n\t\tvar year = this.schedulerForm.value.year;\r\n\t\tvar month = this.schedulerForm.value.month;\r\n\t\tvar day = this.schedulerForm.value.day;\r\n\t\tvar hour = this.schedulerForm.value.hour;\r\n\t\tvar minute = this.schedulerForm.value.minute;\r\n\r\n\t\tvar data = {\r\n\t\t\t\"jobName\": this.schedulerForm.value.jobName,\r\n\t\t\t\"jobScheduleTime\": this.getFormattedDate(year, month, day, hour, minute),\r\n\t\t\t\"cronExpression\": this.schedulerForm.value.cronExpression\r\n\t\t}\r\n\r\n\t\tthis._schedulerService.updateJob(data).subscribe(\r\n\t\t\tsuccess => {\r\n\t\t\t\tif (success['statusCode'] == ServerResponseCode.SUCCESS) {\r\n\t\t\t\t\talert(\"Job updated successfully.\");\r\n\t\t\t\t\tthis.resetForm();\r\n\r\n\t\t\t\t} else if (success['statusCode'] == ServerResponseCode.JOB_DOESNT_EXIST) {\r\n\t\t\t\t\talert(\"Job no longer exist.\");\r\n\r\n\t\t\t\t} else if (success['statusCode'] == ServerResponseCode.JOB_NAME_NOT_PRESENT) {\r\n\t\t\t\t\talert(\"Please provide job name.\");\r\n\t\t\t\t}\r\n\t\t\t\tthis.jobRecords = success['data'];\r\n\t\t\t},\r\n\t\t\terr => {\r\n\t\t\t\talert(\"Error while updating job\");\r\n\t\t\t});\r\n\t}\r\n\r\n\teditJob(selectedJobRow) {\r\n\t\tthis.isEditMode = true;\r\n\r\n\t\tvar d = Date.parse(selectedJobRow.scheduleTime);\r\n\t\tlet date = new Date(selectedJobRow.scheduleTime);\r\n\t\tthis.schedulerForm.patchValue({\r\n\t\t\tjobName: selectedJobRow.jobName,\r\n\t\t\tyear: date.getFullYear(),\r\n\t\t\tmonth: date.getMonth() + 1,\r\n\t\t\tday: date.getDate(),\r\n\t\t\thour: date.getHours(),\r\n\t\t\tminute: date.getMinutes()\r\n\t\t});\r\n\t}\r\n\r\n\tcancelEdit() {\r\n\t\tthis.resetForm();\r\n\t\tthis.isEditMode = false;\r\n\t}\r\n\r\n\tpauseJob(jobName) {\r\n\t\tvar data = {\r\n\t\t\t\"jobName\": jobName\r\n\t\t}\r\n\t\tthis._schedulerService.pauseJob(data).subscribe(\r\n\t\t\tsuccess => {\r\n\t\t\t\tif (success['statusCode'] == ServerResponseCode.SUCCESS && success['data'] == true) {\r\n\t\t\t\t\talert(\"Job paused successfully.\")\r\n\r\n\t\t\t\t} else if (success['data'] == false) {\r\n\t\t\t\t\tif (success['statusCode'] == ServerResponseCode.JOB_ALREADY_IN_RUNNING_STATE) {\r\n\t\t\t\t\t\talert(\"Job already started/completed, so cannot be paused.\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.getJobs();\r\n\t\t\t},\r\n\t\t\terr => {\r\n\t\t\t\talert(\"Error while pausing job\");\r\n\t\t\t});\r\n\r\n\t\t//For updating fresh status of all jobs \r\n\t\tthis.getJobs();\r\n\t}\r\n\r\n\tresumeJob(jobName) {\r\n\t\tvar data = {\r\n\t\t\t\"jobName\": jobName\r\n\t\t}\r\n\t\tthis._schedulerService.resumeJob(data).subscribe(\r\n\t\t\tsuccess => {\r\n\t\t\t\tif (success['statusCode'] == ServerResponseCode.SUCCESS && success['data'] == true) {\r\n\t\t\t\t\talert(\"Job resumed successfully.\")\r\n\r\n\t\t\t\t} else if (success['data'] == false) {\r\n\t\t\t\t\tif (success['statusCode'] == ServerResponseCode.JOB_NOT_IN_PAUSED_STATE) {\r\n\t\t\t\t\t\talert(\"Job is not in paused state, so cannot be resumed.\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//For updating fresh status of all jobs \r\n\t\t\t\tthis.getJobs();\r\n\t\t\t},\r\n\t\t\terr => {\r\n\t\t\t\talert(\"Error while resuming job\");\r\n\t\t\t});\r\n\r\n\t\t//For updating fresh status of all jobs \r\n\t\tthis.getJobs();\r\n\t}\r\n\r\n\tstopJob(jobName) {\r\n\t\tvar data = {\r\n\t\t\t\"jobName\": jobName\r\n\t\t}\r\n\t\tthis._schedulerService.stopJob(data).subscribe(\r\n\t\t\tsuccess => {\r\n\t\t\t\tif (success['statusCode'] == ServerResponseCode.SUCCESS && success['data'] == true) {\r\n\t\t\t\t\talert(\"Job stopped successfully.\")\r\n\r\n\t\t\t\t} else if (success['data'] == false) {\r\n\t\t\t\t\tif (success['statusCode'] == ServerResponseCode.JOB_NOT_IN_RUNNING_STATE) {\r\n\t\t\t\t\t\talert(\"Job not started, so cannot be stopped.\");\r\n\r\n\t\t\t\t\t} else if (success['statusCode'] == ServerResponseCode.JOB_ALREADY_IN_RUNNING_STATE) {\r\n\t\t\t\t\t\talert(\"Job already started.\");\r\n\r\n\t\t\t\t\t} else if (success['statusCode'] == ServerResponseCode.JOB_DOESNT_EXIST) {\r\n\t\t\t\t\t\talert(\"Job no longer exist.\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//For updating fresh status of all jobs \r\n\t\t\t\tthis.getJobs();\r\n\t\t\t},\r\n\t\t\terr => {\r\n\t\t\t\talert(\"Error while pausing job\");\r\n\t\t\t});\r\n\t}\r\n\r\n\tstartJobNow(jobName) {\r\n\t\tvar data = {\r\n\t\t\t\"jobName\": jobName\r\n\t\t}\r\n\t\tthis._schedulerService.startJobNow(data).subscribe(\r\n\t\t\tsuccess => {\r\n\t\t\t\tif (success['statusCode'] == ServerResponseCode.SUCCESS && success['data'] == true) {\r\n\t\t\t\t\talert(\"Job started successfully.\")\r\n\r\n\t\t\t\t} else if (success['data'] == false) {\r\n\t\t\t\t\tif (success['statusCode'] == ServerResponseCode.ERROR) {\r\n\t\t\t\t\t\talert(\"Server error while starting job.\");\r\n\r\n\t\t\t\t\t} else if (success['statusCode'] == ServerResponseCode.JOB_ALREADY_IN_RUNNING_STATE) {\r\n\t\t\t\t\t\talert(\"Job is already started.\");\r\n\r\n\t\t\t\t\t} else if (success['statusCode'] == ServerResponseCode.JOB_DOESNT_EXIST) {\r\n\t\t\t\t\t\talert(\"Job no longer exist.\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//For updating fresh status of all jobs \r\n\t\t\t\tthis.getJobs();\r\n\t\t\t},\r\n\t\t\terr => {\r\n\t\t\t\talert(\"Error while starting job now.\");\r\n\t\t\t});\r\n\r\n\t\t//For updating fresh status of all jobs \r\n\t\tthis.getJobs();\r\n\t}\r\n\r\n\tdeleteJob(jobName) {\r\n\t\tvar data = {\r\n\t\t\t\"jobName\": jobName\r\n\t\t}\r\n\t\tthis._schedulerService.deleteJob(data).subscribe(\r\n\t\t\tsuccess => {\r\n\t\t\t\tif (success['statusCode'] == ServerResponseCode.SUCCESS && success['data'] == true) {\r\n\t\t\t\t\talert(\"Job deleted successfully.\");\r\n\r\n\t\t\t\t} else if (success['data'] == false) {\r\n\t\t\t\t\tif (success['statusCode'] == ServerResponseCode.JOB_ALREADY_IN_RUNNING_STATE) {\r\n\t\t\t\t\t\talert(\"Job is already started/completed, so cannot be deleted.\");\r\n\r\n\t\t\t\t\t} else if (success['statusCode'] == ServerResponseCode.JOB_DOESNT_EXIST) {\r\n\t\t\t\t\t\talert(\"Job no longer exist.\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//For updating fresh status of all jobs\r\n\t\t\t\tthis.getJobs();\r\n\t\t\t},\r\n\t\t\terr => {\r\n\t\t\t\talert(\"Error while deleting job\");\r\n\t\t\t});\r\n\t}\r\n\r\n\trefreshJob() {\r\n\t\t//For updating fresh status of all jobs \r\n\t\tthis.getJobs();\r\n\t}\r\n\r\n\tcronChange(cronExp) {\r\n\t\tthis.schedulerForm.patchValue({\r\n\t\t\tcronExpression: cronExp\r\n\t\t});\r\n\t}\r\n}","<app-toolbar></app-toolbar>\n<form [formGroup]=\"schedulerForm\" novalidate autocomplete=\"off\">\n\t<table>\n\t\t<tr>\n\t\t\t<td>Enter Job Name:</td>\n\t\t\t<td>\n\t\t\t\t<input type=\"text\" name=\"jobName\" id=\"jobName\" class=\"form-control\" formControlName=\"jobName\"\n\t\t\t\t\tstyle=\"width:100px\" [readonly]=\"isEditMode\" />\n\t\t\t\t<button mat-icon-button class=\"routeControls\" *ngIf=\"!jobNameStatus\" disabled>\n\t\t\t\t\t<mat-icon id=\"notReachable\" class=\"status\">highlight_off</mat-icon>\n\t\t\t\t</button>\n\t\t\t\t<button mat-icon-button class=\"routeControls\" *ngIf=\"jobNameStatus\" disabled>\n\t\t\t\t\t<mat-icon id=\"reachable\" class=\"status\">check_circle</mat-icon>\n\t\t\t\t</button>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\t<button class=\"btn btn-primary\" (click)=\"checkJobExistWith(schedulerForm.value.jobName)\">Check name conflict</button>\n\t\t\t</td>\n\t\t</tr>\n\t</table>\n\t<table>\n\t\t<tr>\n\t\t\t<td>Select Job Type:</td>\n\t\t\t<td>\n\t\t\t\t<select name=\"jobType\" id=\"jobType\" formControlName=\"jobType\">\n\t\t\t\t\t<option *ngFor=\"let option of jobTypes\" value=option.value [ngValue]=option.value selected>{{option.viewValue}}</option>\n\t\t\t\t</select>\n\t\t\t</td>\n\t\t</tr>\n\t</table>\n\t<br />\n\t<table>\n\t\t<tr>\n\t\t\t<td>Enter Date and Time:</td>\n\t\t\t<td>\n\t\t\t\tYear:\n\t\t\t\t<input type=\"text\" name=\"year\" id=\"year\" class=\"form-control\" formControlName=\"year\"\n\t\t\t\t\tstyle=\"width:100px\" />\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\tMonth:\n\t\t\t\t<input type=\"text\" name=\"month\" id=\"month\" class=\"form-control\" formControlName=\"month\"\n\t\t\t\t\tstyle=\"width:100px\" />\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\tDay:\n\t\t\t\t<input type=\"text\" name=\"day\" id=\"day\" class=\"form-control\" formControlName=\"day\" style=\"width:100px\" />\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\tHour(24-hour):\n\t\t\t\t<input type=\"text\" name=\"hour\" id=\"hour\" class=\"form-control\" formControlName=\"hour\"\n\t\t\t\t\tstyle=\"width:100px\" />\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\tMinute:\n\t\t\t\t<input type=\"text\" name=\"minute\" id=\"minute\" class=\"form-control\" formControlName=\"minute\"\n\t\t\t\t\tstyle=\"width:100px\" />\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td></td>\n\t\t\t<td style=\"padding: 5px;\" colspan=\"5\">\n\t\t\t\t<b>If given date/time is invalid then job will not get scheduled.\n\t\t\t\t\tIf given date is older than current date then job will be started immediately</b>\n\t\t\t</td>\n\t\t</tr>\n\t</table>\n\t<br /><br />\n\t<table>\n\t\t<tr>\n\t\t\t<td style=\"padding: 5px;\">\n\t\t\t\tEnter Cron expression\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\t<input type=\"text\" name=\"cronExpression\" id=\"cronExpression\" class=\"form-control\"\n\t\t\t\t\tformControlName=\"cronExpression\" style=\"width:200px\" />\n\t\t\t</td>\n\t\t\t<td>Select Sample Cron:</td>\n\t\t\t<td>\n\t\t\t\t<select (change)=\"cronChange($event.target.value)\" class=\"form-control\">\n\t\t\t\t\t<option value=\"0 0/1 * 1/1 * ? *\">Every 1 minutes</option>\n\t\t\t\t\t<option value=\"0 0 10 1/1 * ? *\">Every day at 10 AM</option>\n\t\t\t\t\t<option value=\"0 0 0/1 1/1 * ? *\">Every hour starting 10 AM</option>\n\t\t\t\t\t<option value=\"0 0 10 ? * TUE,THU *\">Every week Tue and Thur at 10 AM</option>\n\t\t\t\t</select>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td></td>\n\t\t\t<td colspan=\"2\">\n\t\t\t\t<b>If Cron expression is blank then it will be treated as One time job</b>\n\t\t\t</td>\n\t\t</tr>\n\t</table>\n\t<table>\n\t\t<tr>\n\t\t\t<td style=\"padding: 5px;\" colspan=\"2\">\n\n\t\t\t\t<!-- Used only in case of Adding New Job -->\n\t\t\t\t<input type=\"button\" name=\"submit\" id=\"submit\" class=\"btn btn-primary\" (click)=\"scheduleJob()\"\n\t\t\t\t\t*ngIf=\"!isEditMode\" value=\"Submit\" />\n\n\t\t\t\t<!-- Used only in case of Edit Job -->\n\t\t\t\t<input type=\"button\" name=\"submit\" id=\"submit\" class=\"btn btn-primary\" (click)=\"updateJob()\"\n\t\t\t\t\t*ngIf=\"isEditMode\" value=\"Update\" />\n\n\t\t\t\t<input type=\"button\" name=\"submit\" id=\"submit\" class=\"btn btn-primary\" (click)=\"cancelEdit()\"\n\t\t\t\t\t*ngIf=\"isEditMode\" value=\"Cancel\" />\n\t\t\t</td>\n\t\t</tr>\n\t</table>\n\n</form>\n<br /><br />\n<div>\n\t<label>Job List:</label>\n\t<br /><br />\n\t<label style=\"color: red\">\n\t\tNote:<br />\n\t\t1. Completed jobs will not be shown in listing.\n\t\t<br />\n\t\t2. If job is in \"RUNNING\" state then no action like \"Pause, Resume, Delete, Edit\" is allowed. </label>\n\t<br /><br />\n\n\t<table class=\"table table-responsive table-hover\" border=\"1\" style=\"width : 100%;\">\n\t\t<thead>\n\t\t\t<th>Job Name</th>\n\t\t\t<th>Job Schedule Time</th>\n\t\t\t<th>Job Last Fired Time</th>\n\t\t\t<th>Job Next Fire Time</th>\n\t\t\t<th>Action</th>\n\t\t\t<th>Job Status</th>\n\t\t</thead>\n\t\t<tbody>\n\t\t\t<ng-container *ngFor=\"let jobRec of jobRecords;let i=index\">\n\t\t\t\t<tr>\n\t\t\t\t\t<td>{{jobRec.jobName}}</td>\n\t\t\t\t\t<td>{{jobRec.scheduleTime | date: 'dd/MM/yyyy HH:mm:ss'}}</td>\n\t\t\t\t\t<td>{{jobRec.lastFiredTime | date: 'dd/MM/yyyy HH:mm:ss'}}</td>\n\t\t\t\t\t<td>{{jobRec.nextFireTime | date: 'dd/MM/yyyy HH:mm:ss'}}</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<button class=\"btn btn-primary\" [disabled]=\"jobRec.jobStatus == 'RUNNING'\"\n\t\t\t\t\t\t\t(click)='startJobNow(jobRec.jobName)'>Start Job Now</button> |\n\n\t\t\t\t\t\t<button class=\"btn btn-primary\" [disabled]=\"jobRec.jobStatus != 'SCHEDULED'\"\n\t\t\t\t\t\t\t(click)='pauseJob(jobRec.jobName)'>Pause Job</button> |\n\n\t\t\t\t\t\t<button class=\"btn btn-primary\" [disabled]=\"jobRec.jobStatus != 'PAUSED'\"\n\t\t\t\t\t\t\t(click)='resumeJob(jobRec.jobName)'>Resume Job</button> |\n\n\t\t\t\t\t\t<button class=\"btn btn-primary\" [disabled]=\"jobRec.jobStatus == 'RUNNING'\"\n\t\t\t\t\t\t\t(click)='deleteJob(jobRec.jobName)'>Delete Job</button> |\n\n\t\t\t\t\t\t<button class=\"btn btn-primary\" [disabled]=\"jobRec.jobStatus != 'RUNNING'\"\n\t\t\t\t\t\t\t(click)='stopJob(jobRec.jobName)'>Stop Job</button> |\n\n\t\t\t\t\t\t<button class=\"btn btn-primary\" [disabled]=\"jobRec.jobStatus == 'RUNNING'\"\n\t\t\t\t\t\t\t(click)='editJob(jobRec)'>Edit Job</button>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>{{jobRec.jobStatus}}</td>\n\t\t\t\t</tr>\n\t\t\t</ng-container>\n\t\t</tbody>\n\t</table>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n\tselector: 'app-toolbar',\n\ttemplateUrl: './toolbar.component.html',\n\tstyleUrls: ['./toolbar.component.css']\n})\nexport class ToolbarComponent {\n\n\tthereIsToken: boolean;\n\n\tconstructor(private router: Router,\n\t\tprivate userService: UserService) {\n\t\tif (localStorage.getItem('token') != null) {\n\t\t\tthis.thereIsToken = true;\n\t\t}\n\t\telse {\n\t\t\tthis.thereIsToken = false;\n\t\t}\n\t}\n\n\tgoSchedulerPage() {\n\t\tthis.router.navigate(['/scheduler']);\n\t}\n\n\tgoRoutesPage() {\n\t\tthis.router.navigate(['/home']);\n\t}\n\n\tlogout(): void {\n\t\tlocalStorage.removeItem('token');\n\t\tthis.router.navigate(['/login']);\n\t}\n\n\tgoProfilePage() {\n\t\tif (localStorage.getItem('token') != null) {\n\t\t\tthis.router.navigate(['/profile']);\n\t\t}\n\t\telse {\n\t\t\tthis.router.navigate(['/login']);\n\t\t}\n\t}\n}\n","<mat-toolbar color=\"primary\">Emotions Map Administration\n\t<button mat-stroked-button *ngIf=\"thereIsToken\" id=\"routesButton\" color=\"basic\" (click)=\"goRoutesPage()\">\n\t\tView routes\n\t</button>\n\t<button mat-stroked-button *ngIf=\"thereIsToken\" id=\"schedulerButton\" color=\"basic\" (click)=\"goSchedulerPage()\">\n\t\tSet scheduler\n\t</button>\n\t<button mat-flat-button *ngIf=\"thereIsToken\" id=\"loginButton\" color=\"basic\" (click)=\"logout()\">\n\t\tLogout\n\t</button>\n</mat-toolbar>","import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from \"@angular/common/http\"\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Observable } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\nimport { environment } from 'src/environments/environment';\r\n\r\nconst API_URL = environment.apiUrl;\r\n\r\n@Injectable()\r\nexport class AuthInterceptorService implements HttpInterceptor {\r\n\r\n\tconstructor(private router: Router) { }\r\n\r\n\tintercept(req: HttpRequest<any>,\r\n\t\tnext: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n\t\tconst idToken: string = localStorage.getItem(\"token\");\r\n\t\tif (idToken) {\r\n\t\t\tconst cloned = req.clone({\r\n\t\t\t\theaders: req.headers.set('Authorization',\r\n\t\t\t\t\t'Bearer ' + idToken)\r\n\t\t\t});\r\n\t\t\treturn next.handle(cloned);\r\n\t\t}\r\n\t\telse if (req.url == (API_URL + \"/users/login\")) {\r\n\t\t\treturn next.handle(req);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.router.navigate(['login']);\r\n\t\t}\r\n\t}\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\n\nconst BACKEND_URL = environment.apiUrl + '/routes';\n\n@Injectable({\n\tprovidedIn: 'root'\n})\nexport class RouteService {\n\n\tconstructor(private http: HttpClient) { }\n\n\tgetAllRoutes(){\n\t\treturn this.http.get<JSON>(BACKEND_URL + '/allroutes');\n\t}\n\n\tgetRoute(id: String){\n\t\treturn this.http.get<JSON>(BACKEND_URL + '/route/' + id);\n\t}\n\n\taddRoute(name: String, uri: String, username: String, password: String){\n\t\tvar body = {\n\t\t\tname: name,\n\t\t\turi: uri,\n\t\t\tusername: username,\n\t\t\tpassword: password\n\t\t}\n\t\treturn this.http.post<JSON>(BACKEND_URL + '/route', body);\n\t}\n\n\teditRoute(id: String, name: String, uri: String, username: String, password: String){\n\t\tvar body = {\n\t\t\tname: name,\n\t\t\turi: uri,\n\t\t\tusername: username,\n\t\t\tpassword: password\n\t\t}\n\t\treturn this.http.put<JSON>(BACKEND_URL + '/route/' + id, body);\n\t}\n\n\tdeleteRoute(id: String){\n\t\treturn this.http.delete<JSON>(BACKEND_URL + '/route/' + id);\n\t}\n\n\tcheckReachability(id: String){\n\t\treturn this.http.get<boolean>(BACKEND_URL + \"/reachability/\" + id);\n\t}\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { Injectable } from '@angular/core';\r\nimport { Http, Response, Headers, RequestOptions, RequestMethod, RequestOptionsArgs, URLSearchParams } from '@angular/http';\r\nimport { map } from 'rxjs/operators';\r\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n\r\nconst BACKEND_URL = environment.apiUrl;\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root'\r\n})\r\nexport class SchedulerService {\r\n\r\n\tgetJobsUrl = \"/scheduler/jobs\";\r\n\tscheduleJobUrl = \"/scheduler/schedule\";\r\n\tpauseJobUrl = \"/scheduler/pause\";\r\n\tresumeJobUrl = \"/scheduler/resume\";\r\n\tdeleteJobUrl = \"/scheduler/delete\";\r\n\tupdateJobUrl = \"/scheduler/update\";\r\n\tisJobWithNamePresentUrl = \"/scheduler/checkJobName\";\r\n\tstopJobUrl = \"/scheduler/stop\";\r\n\tstartJobNowUrl = \"/scheduler/start\";\r\n\r\n\t/* Http functions are not intercepted so the token has to be set manually, for future versions it is better to use HttpClient */\r\n\tprivate options = new RequestOptions(\r\n\t\t{\r\n\t\t\theaders: new Headers({\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t'Authorization': localStorage.getItem('token')\r\n\t\t\t})\r\n\t\t});\r\n\r\n\tconstructor(\r\n\t\tprivate _http: Http,\r\n\t\tprivate http: HttpClient) {\r\n\t}\r\n\r\n\tgetJobs() {\r\n\t\treturn this.http.get<JSON>(BACKEND_URL + this.getJobsUrl);\r\n\t}\r\n\r\n\tscheduleJob(data) {\r\n\t\tlet params: URLSearchParams = new URLSearchParams();\r\n\t\tfor (let key in data) {\r\n\t\t\tparams.set(key, data[key]);\r\n\t\t}\r\n\t\tthis.options.search = params;\r\n\r\n\t\treturn this._http.get(BACKEND_URL + this.scheduleJobUrl, this.options).pipe(map(res => res.json()));\r\n\t}\r\n\r\n\tisJobWithNamePresent(data) {\r\n\t\tlet params: URLSearchParams = new URLSearchParams();\r\n\t\tfor (let key in data) {\r\n\t\t\tparams.set(key, data[key]);\r\n\t\t}\r\n\t\tthis.options.search = params;\r\n\t\treturn this._http.get(BACKEND_URL + this.isJobWithNamePresentUrl, this.options).pipe(map(res => res.json()));\r\n\t}\r\n\r\n\tpauseJob(data) {\r\n\t\tlet params: URLSearchParams = new URLSearchParams();\r\n\t\tfor (let key in data) {\r\n\t\t\tparams.set(key, data[key]);\r\n\t\t}\r\n\t\tthis.options.search = params;\r\n\t\treturn this._http.get(BACKEND_URL + this.pauseJobUrl, this.options).pipe(map(res => res.json()));\r\n\t}\r\n\r\n\tresumeJob(data) {\r\n\t\tlet params: URLSearchParams = new URLSearchParams();\r\n\t\tfor (let key in data) {\r\n\t\t\tparams.set(key, data[key]);\r\n\t\t}\r\n\t\tthis.options.search = params;\r\n\t\treturn this._http.get(BACKEND_URL + this.resumeJobUrl, this.options).pipe(map(res => res.json()));\r\n\t}\r\n\r\n\tdeleteJob(data) {\r\n\t\tlet params: URLSearchParams = new URLSearchParams();\r\n\t\tfor (let key in data) {\r\n\t\t\tparams.set(key, data[key]);\r\n\t\t}\r\n\t\tthis.options.search = params;\r\n\t\treturn this._http.get(BACKEND_URL + this.deleteJobUrl, this.options).pipe(map(res => res.json()));\r\n\t}\r\n\r\n\tstopJob(data) {\r\n\t\tlet params: URLSearchParams = new URLSearchParams();\r\n\t\tfor (let key in data) {\r\n\t\t\tparams.set(key, data[key]);\r\n\t\t}\r\n\t\tthis.options.search = params;\r\n\t\treturn this._http.get(BACKEND_URL + this.stopJobUrl, this.options).pipe(map(res => res.json()));\r\n\t}\r\n\r\n\tstartJobNow(data) {\r\n\t\tlet params: URLSearchParams = new URLSearchParams();\r\n\t\tfor (let key in data) {\r\n\t\t\tparams.set(key, data[key]);\r\n\t\t}\r\n\t\tthis.options.search = params;\r\n\t\treturn this._http.get(BACKEND_URL + this.startJobNowUrl, this.options).pipe(map(res => res.json()));\r\n\t}\r\n\r\n\tupdateJob(data) {\r\n\t\tlet params: URLSearchParams = new URLSearchParams();\r\n\t\tfor (let key in data) {\r\n\t\t\tparams.set(key, data[key]);\r\n\t\t}\r\n\t\tthis.options.search = params;\r\n\r\n\t\treturn this._http.get(BACKEND_URL + this.updateJobUrl, this.options).pipe(map(res => res.json()));\r\n\t}\r\n}","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { Router } from '@angular/router';\n\nconst BACKEND_URL = environment.apiUrl + '/users';\n\n@Injectable({\n\tprovidedIn: 'root'\n})\nexport class UserService {\n\n\tconstructor(private http: HttpClient,\n\t\tprivate router: Router) { }\n\n\tlogin(username: String, password: String) {\n\t\tvar body = {\n\t\t\tusername: username,\n\t\t\tpassword: password\n\t\t}\n\t\treturn this.http.post<JSON>(BACKEND_URL + '/login', body);\n\t}\n\n\tlogout() {\n\t\tlocalStorage.removeItem('token');\n\t\tthis.router.navigate(['login']);\n\t}\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n\tproduction: false,\n\tapiUrl: 'http://localhost:7080'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}